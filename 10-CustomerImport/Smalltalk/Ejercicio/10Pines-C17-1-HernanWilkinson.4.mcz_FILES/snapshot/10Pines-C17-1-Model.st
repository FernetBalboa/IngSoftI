Object subclass: #Address	instanceVariableNames: 'id streetName streetNumber town zipCode province'	classVariableNames: ''	poolDictionaries: ''	category: '10Pines-C17-1-Model'!!Address methodsFor: 'as yet unclassified' stamp: 'HernanWilkinson 11/1/2016 10:06'!isAt: aStreetName	^streetName = aStreetName ! !!Address methodsFor: 'twon' stamp: 'HernanWilkinson 10/28/2016 16:12'!town	^town! !!Address methodsFor: 'twon' stamp: 'HernanWilkinson 10/28/2016 16:07'!town: aTown 	town := aTown! !!Address methodsFor: 'province' stamp: 'HernanWilkinson 10/28/2016 16:11'!province	^province! !!Address methodsFor: 'province' stamp: 'HernanWilkinson 10/28/2016 16:08'!province: aProvince 	province := aProvince	! !!Address methodsFor: 'zip code' stamp: 'HernanWilkinson 10/28/2016 16:13'!zipCode	^zipCode! !!Address methodsFor: 'zip code' stamp: 'HernanWilkinson 10/28/2016 16:08'!zipCode: aZipCode 	zipCode := aZipCode! !!Address methodsFor: 'street' stamp: 'HernanWilkinson 10/28/2016 16:12'!streetName	^streetName ! !!Address methodsFor: 'street' stamp: 'HernanWilkinson 10/28/2016 16:12'!streetNumber	^streetNumber ! !!Address methodsFor: 'street' stamp: 'HernanWilkinson 10/28/2016 13:27'!streetName: aStreetName 	streetName := aStreetName ! !!Address methodsFor: 'street' stamp: 'HernanWilkinson 10/28/2016 13:27'!streetNumber: aStreetNumber 	streetNumber := aStreetNumber ! !Object subclass: #Customer	instanceVariableNames: 'id firstName lastName identificationType identificationNumber addresses'	classVariableNames: ''	poolDictionaries: ''	category: '10Pines-C17-1-Model'!!Customer methodsFor: 'initialization' stamp: 'HernanWilkinson 10/28/2016 13:26'!initialize	super initialize.	addresses := OrderedCollection new.! !!Customer methodsFor: 'as yet unclassified' stamp: 'HernanWilkinson 11/1/2016 10:05'!addressAt: aStreetName ifNone: noneClosure 		^addresses detect: [ :anAddress | anAddress isAt: aStreetName ] ifNone: noneClosure ! !!Customer methodsFor: 'name' stamp: 'HernanWilkinson 10/28/2016 13:09'!lastName: aLastName 	lastName := aLastName! !!Customer methodsFor: 'name' stamp: 'HernanWilkinson 10/28/2016 13:09'!firstName: aName 	firstName := aName! !!Customer methodsFor: 'name' stamp: 'HernanWilkinson 10/28/2016 16:15'!firstName		^firstName ! !!Customer methodsFor: 'name' stamp: 'HernanWilkinson 10/28/2016 16:15'!lastName	^lastName ! !!Customer methodsFor: 'addresses' stamp: 'HernanWilkinson 11/1/2016 09:43'!numberOfAddresses		^addresses size! !!Customer methodsFor: 'addresses' stamp: 'HernanWilkinson 10/28/2016 13:27'!addAddress: anAddress 	addresses add: anAddress ! !!Customer methodsFor: 'addresses' stamp: 'HernanWilkinson 10/28/2016 13:25'!addresses	^ addresses! !!Customer methodsFor: 'identification' stamp: 'HernanWilkinson 10/28/2016 13:10'!identificationNumber: anIdentificationNumber 	identificationNumber := anIdentificationNumber! !!Customer methodsFor: 'identification' stamp: 'HernanWilkinson 10/28/2016 16:13'!identificationType		^identificationType ! !!Customer methodsFor: 'identification' stamp: 'HernanWilkinson 10/28/2016 16:13'!identificationNumber		^identificationNumber ! !!Customer methodsFor: 'identification' stamp: 'HernanWilkinson 10/28/2016 13:10'!identificationType: anIdentificationType 	identificationType := anIdentificationType! !TestCase subclass: #CustomerImportTest	instanceVariableNames: 'session importer'	classVariableNames: ''	poolDictionaries: ''	category: '10Pines-C17-1-Model'!!CustomerImportTest methodsFor: 'test data' stamp: 'FernandoBalboa 11/9/2017 20:34'!emptyTestData	^ ReadStream on: ''! !!CustomerImportTest methodsFor: 'test data' stamp: 'HernanWilkinson 11/1/2016 15:17'!validTestData	^ ReadStream on:'C,Pepe,Sanchez,D,22333444A,San Martin,3322,Olivos,1636,BsAsA,Maipu,888,Florida,1122,Buenos AiresC,Juan,Perez,C,23-25666777-9A,Alem,1122,CABA,1001,CABA'! !!CustomerImportTest methodsFor: 'test data' stamp: 'CookieMonster 11/13/2017 16:57'!notAnAdressTestData	^ ReadStream on:'C,Juan,Perez,C,23-25666777-9R,Alem,1122,CABA,1001,CABAA,Alem,1122,CABA,1001,CABA'! !!CustomerImportTest methodsFor: 'test data' stamp: 'CookieMonster 11/13/2017 16:58'!notACustomerATestData	^ ReadStream on:'M,Pepe,Sanchez,D,22333444A,San Martin,3322,Olivos,1636,BsAsA,Maipu,888,Florida,1122,Buenos AiresC,Juan,Perez,C,23-25666777-9A,Alem,1122,CABA,1001,CABA'! !!CustomerImportTest methodsFor: 'asserting' stamp: 'HernanWilkinson 11/1/2016 15:16'!assertPepeSanchezWasImportedCorrectly	| customer idType idNumber |	idType := 'D'.	idNumber := '22333444'.	customer := self customerIdentifiedAs: idType numbered: idNumber.		self assert: customer isNamed: 'Pepe' lastName: 'Sanchez' identfiedAs: idType withNumber: idNumber andNumberOfAddresses: 2.	self assert: customer hasAddressAt: 'San Martin' number: 3322 in: 'Olivos' zipCode: 1636 province: 'BsAs'.	self assert: customer hasAddressAt: 'Maipu' number: 888 in: 'Florida' zipCode: 1122 province: 'Buenos Aires'! !!CustomerImportTest methodsFor: 'asserting' stamp: 'HernanWilkinson 11/1/2016 10:56'!assert: customer isNamed: firstName lastName: lastName identfiedAs: idType withNumber: idNumber andNumberOfAddresses: addressesSize	self assert: customer firstName equals: firstName.	self assert: customer lastName equals: lastName.	self assert: customer identificationType equals: idType.	self assert: customer identificationNumber equals: idNumber.	self assert: customer numberOfAddresses equals: addressesSize .! !!CustomerImportTest methodsFor: 'asserting' stamp: 'HernanWilkinson 11/1/2016 15:13'!assertImportedCustomersSizeIsCorrect		self assert: (session selectAllOfType: Customer) size equals: 2.	! !!CustomerImportTest methodsFor: 'asserting' stamp: 'HernanWilkinson 11/1/2016 11:00'!assert: customer hasAddressAt: streetName number: streetNumber in: town zipCode: zipCode province: province	| address |		address := customer addressAt: streetName ifNone: [ self fail ].	self assert: address streetName equals: streetName.	self assert: address streetNumber equals: streetNumber.	self assert: address town equals: town.	self assert: address zipCode equals: zipCode.	self assert: address province equals: province.	! !!CustomerImportTest methodsFor: 'asserting' stamp: 'HernanWilkinson 11/1/2016 15:14'!assertJuanPerezWasImportedCorrectly		| customer idType idNumber |		idType := 'C'.	idNumber := '23-25666777-9'.	customer := self customerIdentifiedAs: idType numbered: idNumber.		self assert: customer isNamed: 'Juan' lastName: 'Perez' identfiedAs: idType withNumber: idNumber andNumberOfAddresses: 1.	self assert: customer hasAddressAt: 'Alem' number: 1122 in: 'CABA' zipCode: 1001 province: 'CABA'.	! !!CustomerImportTest methodsFor: 'importing' stamp: 'FernandoBalboa 11/9/2017 20:20'!importCustomersFrom: inputStream on: aSession		(CustomerImporter for: aSession ) importFrom: inputStream! !!CustomerImportTest methodsFor: 'importing' stamp: 'HernanWilkinson 11/1/2016 15:17'!customerIdentifiedAs: anIdentifycationType numbered: anIdentificationNumber		|customers |		customers := session 		select: [ :aCustomer | aCustomer identificationType = anIdentifycationType and: [ aCustomer identificationNumber = anIdentificationNumber ] ]		ofType: Customer.			self assert: customers size equals: 1.		^customers anyOne.! !!CustomerImportTest methodsFor: 'setup-teardown' stamp: 'HernanWilkinson 11/1/2016 15:24'!setUp	session := DataBaseSession for: (Array with: self addressMapping with: self customerMapping).	session open.	session beginTransaction! !!CustomerImportTest methodsFor: 'setup-teardown' stamp: 'HernanWilkinson 11/1/2016 15:23'!addressMapping	^ ClassMapping		withDefaultTableNameFor: Address		mappingAll:			(Array				with: (EmbededMapping withDefaultFieldNameFor: #streetName)				with: (EmbededMapping withDefaultFieldNameFor: #streetNumber)				with: (EmbededMapping withDefaultFieldNameFor: #town)				with: (EmbededMapping withDefaultFieldNameFor: #zipCode)				with: (EmbededMapping withDefaultFieldNameFor: #province))! !!CustomerImportTest methodsFor: 'setup-teardown' stamp: 'HernanWilkinson 11/1/2016 15:24'!customerMapping	^ ClassMapping		withDefaultTableNameFor: Customer		mappingAll:			(Array				with: (EmbededMapping withDefaultFieldNameFor: #firstName)				with: (EmbededMapping withDefaultFieldNameFor: #lastName)				with: (EmbededMapping withDefaultFieldNameFor: #identificationType)				with: (EmbededMapping withDefaultFieldNameFor: #identificationNumber)				with: (OneToManyMapping withDefaultFieldNameFor: #addresses ofType: Address))! !!CustomerImportTest methodsFor: 'setup-teardown' stamp: 'HernanWilkinson 11/1/2016 15:23'!tearDown	session commit.	session close! !!CustomerImportTest methodsFor: 'testing' stamp: 'HernanWilkinson 11/1/2016 15:20'!testImportCustomers	self importCustomersFrom: self validTestData on: session.	self assertImportedCustomersSizeIsCorrect.	self assertPepeSanchezWasImportedCorrectly.	self assertJuanPerezWasImportedCorrectly! !!CustomerImportTest methodsFor: 'testing' stamp: 'CookieMonster 11/13/2017 16:52'!test01CannotImportFromAnEmptyStream	self 		should: [ self importCustomersFrom: (self emptyTestData ) on: session. self fail ] 		raise: Error 		withExceptionDo: [ :anError | self assert: (anError messageText = CustomerImporter emptyStreamErrorMessage ) ] 	! !!CustomerImportTest methodsFor: 'tests' stamp: 'CookieMonster 11/13/2017 17:49'!test02unknownFormatAdress	self 		should: [ self importCustomersFrom: (self notAnAdressTestData) on: session. self fail ] 		raise: InvalidLine 		withExceptionDo: [ :anError | 			self assert: (anError messageText = CustomerImporter invalidLineErrorMessage).			self assert: (self assertJuanPerezWasImportedCorrectly )] 	! !Object subclass: #CustomerImporter	instanceVariableNames: 'line customerBeingProcessed session'	classVariableNames: ''	poolDictionaries: ''	category: '10Pines-C17-1-Model'!!CustomerImporter methodsFor: 'stream checks' stamp: 'FernandoBalboa 11/9/2017 20:04'!lineIsAnAdress	^ line beginsWith: 'A'! !!CustomerImporter methodsFor: 'stream checks' stamp: 'FernandoBalboa 11/9/2017 20:04'!lineIsACustomer	^ line beginsWith: 'C'! !!CustomerImporter methodsFor: 'stream checks' stamp: 'FernandoBalboa 11/9/2017 19:46'!hasLineToProcess: aStreamline := aStream nextLine.^ line isNotNil ! !!CustomerImporter methodsFor: 'errors' stamp: 'FernandoBalboa 11/9/2017 20:36'!emptyStreamError	^ Error signal: self class emptyStreamErrorMessage.! !!CustomerImporter methodsFor: 'errors' stamp: 'CookieMonster 11/13/2017 17:05'!invalidAdressError	^ Error signal: self class invalidAdressErrorMessage.! !!CustomerImporter methodsFor: 'errors' stamp: 'CookieMonster 11/13/2017 17:49'!invalidLineError	^ InvalidLine signal: self class invalidLineErrorMessage.! !!CustomerImporter methodsFor: 'importing' stamp: 'FernandoBalboa 11/9/2017 20:39'!importFrom: inputStream	self assertIsNotEmpty: inputStream.	[ self hasLineToProcess: inputStream ]		whileTrue:			[ 			self processNextLine]! !!CustomerImporter methodsFor: 'initialization' stamp: 'FernandoBalboa 11/9/2017 20:22'!initializeFor: aSession	session := aSession ! !!CustomerImporter methodsFor: 'asserting' stamp: 'CookieMonster 11/13/2017 17:44'!assertIsAValidLine	 ( (self lineIsAnAdress) or: (self lineIsACustomer) ) ifFalse:[self invalidLineError ]! !!CustomerImporter methodsFor: 'asserting' stamp: 'FernandoBalboa 11/9/2017 20:43'!assertIsNotEmpty: aStream	(aStream isEmpty) ifTrue: [^ self emptyStreamError ]! !!CustomerImporter methodsFor: 'asserting' stamp: 'CookieMonster 11/13/2017 17:14'!assertIsAnAdress	self lineIsAnAdress ifFalse:[^ self invalidAdressError ]! !!CustomerImporter methodsFor: 'process lines' stamp: 'FernandoBalboa 11/9/2017 20:10'!processCustomerPersonalInformation	| customerData |	customerData := line substrings: {$,}.	customerBeingProcessed := Customer new.	customerBeingProcessed firstName: customerData second.	customerBeingProcessed lastName: customerData third.	customerBeingProcessed identificationType: customerData fourth.	customerBeingProcessed identificationNumber: customerData fifth.! !!CustomerImporter methodsFor: 'process lines' stamp: 'FernandoBalboa 11/9/2017 19:52'!processCustomerAdressInformation	| addressData newAddress |	addressData := line substrings: {$,}.	newAddress := Address new.	newAddress streetName: addressData second.	newAddress streetNumber: addressData third asInteger.	newAddress town: addressData fourth.	newAddress zipCode: addressData fifth asInteger.	newAddress province: addressData sixth.	^ newAddress! !!CustomerImporter methodsFor: 'process lines' stamp: 'CookieMonster 11/13/2017 17:17'!processNextLine	self assertIsAValidLine.	self lineIsACustomer		ifTrue: [ self processCustomerPersonalInformation.			session persist: customerBeingProcessed ].	self lineIsAnAdress		ifTrue: [ customerBeingProcessed				addAddress: self processCustomerAdressInformation ]! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!CustomerImporter class	instanceVariableNames: ''!!CustomerImporter class methodsFor: 'error messages' stamp: 'CookieMonster 11/13/2017 17:04'!emptyStreamErrorMessage	 ^'Error: Empty stream.'! !!CustomerImporter class methodsFor: 'error messages' stamp: 'CookieMonster 11/13/2017 17:19'!invalidLineErrorMessage	 ^'Error: Invalid Type.' ! !!CustomerImporter class methodsFor: 'error messages' stamp: 'CookieMonster 11/13/2017 17:04'!invalidAdressErrorMessage	 ^'Error: Invalid Adress.' ! !!CustomerImporter class methodsFor: 'instance creation' stamp: 'FernandoBalboa 11/9/2017 20:21'!for: aSession	^ self new initializeFor: aSession.! !Error subclass: #InvalidLine	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: '10Pines-C17-1-Model'!